services:
  anomaly:
    build:
      context: .
      dockerfile: anom/Dockerfile
    volumes:
      - ./config/prod:/config
      - ./logs/anom.log:/app/anom.log
      - ./data/anom/anoms.json:/app/anoms.json
    depends_on:
      - kafka
    ports:
      - "8140:8140"
  dashboard:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    volumes:
      - ./dashboard:/usr/share/nginx/html
    depends_on: 
      - analyzer
      - processing
    ports:
      - "80:80"
  receiver:
    build:
      context: .
      dockerfile: receiver/Dockerfile
    volumes:
      - ./config/prod:/config
      - ./logs/receiver.log:/app/receiver.log
    depends_on:
      - kafka
    ports:
      - "8080:8080"
  storage:
    build:
      context: .
      dockerfile: storage/Dockerfile
    volumes:
      - ./config/prod:/config
      - ./logs/storage.log:/app/storage.log
    depends_on:
      - kafka
      - db
  processing:
    build:
      context: .
      dockerfile: processing/Dockerfile
    volumes:
      - ./config/prod:/config
      - ./logs/processing.log:/app/processing.log
      - ./data/processing/processing.json:/app/stats.json
    depends_on:
      - storage
    ports:
      - "8100:8100"
  analyzer:
    build:
      context: .
      dockerfile: analyzer/Dockerfile
    volumes:
      - ./config/prod:/config
      - ./logs/analyzer.log:/app/analyzer.log
    depends_on:
      - kafka
    ports:
      - "8120:8120"
  db:
    image: mysql
    container_name: 3855_database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./data/database:/var/lib/mysql

  zookeeper:
    image: wurstmeister/zookeeper
    hostname: zookeeper
    restart: unless-stopped

  kafka:
    image: wurstmeister/kafka
    command: bash -c "rm -f /kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
    restart: unless-stopped
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: kafka # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://host.docker.internal:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
    volumes:
      - ./data/kafka/data:/kafka
      - ./data/kafka/logs:/var/log/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"

volumes:
  zoo-data:
  zoo-logs:
